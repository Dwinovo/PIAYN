plugins {
    id("java-library")
    id("maven-publish")
    id("net.neoforged.moddev") version "2.0.105"
    id("idea")
}

tasks.named<Wrapper>("wrapper").configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = project.property("mod_version") as String
group = project.property("mod_group_id") as String

repositories {    // 阿里云镜像 - 优先使用，速度最快
    maven {
        name = "Aliyun Central"
        url = uri("https://maven.aliyun.com/repository/central")

        content {
            // 优先从阿里云下载常用依赖
            includeGroup("org.projectlombok")
            includeGroup("org.slf4j")
            includeGroup("com.google.guava")
        }
    }
    maven { url = uri("https://maven.aliyun.com/repository/public") }      // Maven Central
    maven { url = uri("https://maven.aliyun.com/repository/jcenter") }     // JCenter
    maven { url = uri("https://maven.aliyun.com/repository/google") }      // Google
    maven { url = uri("https://maven.aliyun.com/repository/gradle-plugin") } // Gradle 插件
    
    // 腾讯云镜像作为备用
    maven {
        name = "Tencent Central"
        url = uri("https://mirrors.cloud.tencent.com/nexus/repository/maven-public/")
    }

    maven {
        name = "GeckoLib"
        url = uri("https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/")
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = uri("https://maven.blamejared.com/")
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = uri("https://modmaven.dev")
    }
    // CarryOn mod repository
    maven {
        name = "BlameJared"
        url = uri("https://maven.blamejared.com/")
    }
    maven {
        url = uri("https://api.modrinth.com/maven") 
    }
}

base {
    archivesName = "PetIsAllYouNeed-NeoForge-" + project.property("minecraft_version")
}

java.toolchain.languageVersion.set(JavaLanguageVersion.of(21))

neoForge {
    version = project.property("neo_version") as String

    parchment {
        mappingsVersion.set(project.property("parchment_mappings_version") as String)
        minecraftVersion.set(project.property("parchment_minecraft_version") as String)
    }

    runs {
        create("client") {
            client()
            systemProperty("neoforge.enabledGameTestNamespaces", project.property("mod_id") as String)
        }
        create("clientDwin") {
            client()
            systemProperty("neoforge.enabledGameTestNamespaces", project.property("mod_id") as String)
            programArguments.addAll("--username", "Dwinovo")
        }

        create("server") {
            server()
            programArgument("--nogui")
            systemProperty("neoforge.enabledGameTestNamespaces", project.property("mod_id") as String)
        }

        create("gameTestServer") {
            type = "gameTestServer"
            systemProperty("neoforge.enabledGameTestNamespaces", project.property("mod_id") as String)
        }

        create("data") {
            data()
            programArguments.addAll("--mod", project.property("mod_id") as String, "--all", "--output", file("src/generated/resources/").absolutePath, "--existing", file("src/main/resources/").absolutePath)
        }

        configureEach {
            systemProperty("forge.logging.markers", "REGISTRIES")

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {

        create(project.property("mod_id") as String) {
            sourceSet(sourceSets.main.get())
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.configure {
    resources.srcDir("src/generated/resources")
}

configurations {
    runtimeClasspath.get().extendsFrom(create("localRuntime"))
    // 使用NeoForge提供的additionalRuntimeClasspath配置
}

dependencies {
    // 使用jar-in-jar方式打包Geckolib
    compileOnly("software.bernie.geckolib:geckolib-neoforge-${project.property("minecraft_version")}:${project.property("geckolib_version")}")
    runtimeOnly("software.bernie.geckolib:geckolib-neoforge-${project.property("minecraft_version")}:${project.property("geckolib_version")}")
    jarJar("software.bernie.geckolib:geckolib-neoforge-${project.property("minecraft_version")}:${project.property("geckolib_version")}")

    compileOnly("mezz.jei:jei-${project.property("minecraft_version")}-neoforge-api:${project.property("jei_version")}")
    runtimeOnly("mezz.jei:jei-${project.property("minecraft_version")}-neoforge:${project.property("jei_version")}")

    compileOnly("tschipp.carryon:carryon-neoforge-${project.property("minecraft_version")}:${project.property("carryon_version")}")
    runtimeOnly("tschipp.carryon:carryon-neoforge-${project.property("minecraft_version")}:${project.property("carryon_version")}")

    compileOnly("maven.modrinth:jade:${project.property("jade_version")}")
    runtimeOnly("maven.modrinth:jade:${project.property("jade_version")}")

    // lombok - 需要同时配置compileOnly和annotationProcessor
    compileOnly("org.projectlombok:lombok:${project.property("lombok_version")}")
    annotationProcessor("org.projectlombok:lombok:${project.property("lombok_version")}")

    // hutools - 配置运行时类路径
    compileOnly("cn.hutool:hutool-core:${project.property("hutool_version")}")
    runtimeOnly("cn.hutool:hutool-core:${project.property("hutool_version")}")
    "additionalRuntimeClasspath"("cn.hutool:hutool-core:${project.property("hutool_version")}")
    jarJar("cn.hutool:hutool-core:${project.property("hutool_version")}")


    
    

}

val generateModMetadata = tasks.register<ProcessResources>("generateModMetadata") {
    val replaceProperties = mapOf(
            "minecraft_version"      to project.property("minecraft_version"),
            "minecraft_version_range" to project.property("minecraft_version_range"),
            "neo_version"            to project.property("neo_version"),
            "loader_version_range"   to project.property("loader_version_range"),
            "mod_id"                 to project.property("mod_id"),
            "mod_name"               to project.property("mod_name"),
            "mod_license"            to project.property("mod_license"),
            "mod_version"            to project.property("mod_version"),
            "mod_authors"            to project.property("mod_authors"),
            "mod_description"        to project.property("mod_description")
    )
    inputs.properties(replaceProperties)
    expand(replaceProperties)
    from("src/main/templates")
    into("build/generated/sources/modMetadata")
}

sourceSets.main.configure {
    resources.srcDir(generateModMetadata)
}

neoForge.ideSyncTask(generateModMetadata)

publishing {
    publications {
        register<MavenPublication>("mavenJava") {
            from(components["java"])
        }
    }
    repositories {
        maven {
            url = uri("file://${project.projectDir}/repo")
        }
    }
}

tasks.withType<JavaCompile>().configureEach {
    options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
    // 为Lombok配置编译参数
    options.compilerArgs.addAll(listOf(
        "-parameters"
    ))
}

idea {
    module {
        isDownloadSources = true
        isDownloadJavadoc = true
    }
}